// Description: Testing for sphere volume
// DocumentationOf: sphere_volume.h

#include "test_pastelgeometry.h"

#include <pastel/geometry/sphere_volume.h>
#include <pastel/sys/math_functions.h>

using namespace Pastel;

namespace
{

	class Test
		: public TestSuite
	{
	public:
		Test()
			: TestSuite(&testReport())
		{
		}

		virtual void run()
		{
			test();
		}

		void test()
		{
			// Natural logarithms of the volumes of hyperspheres 
			// in dimensions 0 -> 256. Computed with Maple to 16 digits.
			real correctSet[257] =
			{
				0,
				.6931471805599453, 1.144729885849400, 1.432411958301181, 1.596312591138855,
				1.660851112276426, 1.642430188320145, 1.552818029630458, 1.400865713049655,
				1.193470518703585, .9361576864649543, .6334523123145588, .2891281030862997,
				-0.9361997873763275e-1, -.5120521601196137, -.9637931134304974, -1.446763815950049,
				-1.959129391077368, -2.499258507436869, -3.065691303834463, -3.657113714581514,
				-4.272336675148540, -4.910279101530485, -5.569953824668344, -6.250455865469085,
				-6.950952583127200, -7.670675337081221, -8.408912382722183, -9.165002780847080,
				-9.938331146299312, -10.72832309609989, -11.53444128437511, -12.35618193249027,
				-13.19307177943225, -14.04466539069709, -14.91054277451232, -15.79030726274385,
				-16.68358362074719, -17.59001635606089, -18.50926820046750, -19.44101874376548,
				-20.38496320076246, -21.34081129563951, -22.30828625004668, -23.28712386314842,
				-24.27707167340765, -25.27788819322817, -26.28934220870836, -27.31121213772672,
				-28.34328544040964, -29.38535807674552, -30.43723400672463, -31.49872472891760,
				-32.56964885386740, -33.64983170907253, -34.73910497269053, -35.83730633339833,
				-36.94427917411573, -38.05987227753541, -39.18393955161211, -40.31633977334816,
				-41.45693634937607, -42.60559709198391, -43.76219400935826, -44.92660310893423,
				-46.09870421284455, -47.27838078455131, -48.46551976582617, -49.66001142331808,
				-50.86174920401408, -52.07062959895809, -53.28655201464605, -54.50941865156480,
				-55.73913438938510, -56.97560667835962, -58.21874543651207, -59.46846295223661,
				-60.72467379195640, -61.98729471251686, -63.25624457801408, -64.53144428078139,
				-65.81281666627717, -67.10028646163630, -68.39378020766443, -69.69322619407027,
				-70.99855439774540, -72.30969642391443, -73.62658544999064, -74.94915617198329,
				-76.27734475331343, -77.61108877590421, -78.95032719342093, -80.29500028654390,
				-81.64504962016484, -83.00041800240456, -84.36104944535604, -85.72688912746305,
				-87.09788335745008, -88.47397953972428, -89.85512614117532, -91.24127265930303,
				-92.63236959160724, -94.02836840617795, -95.42922151342753, -96.83488223890998,
				-98.24530479717570, -99.66044426661270, -101.0802565652283, -102.5046984273276,
				-103.9337273810481, -105.3673017267106, -106.8053805159511, -108.2479235315964,
				-109.6948912682540, -111.1462449135815, -112.6019463302080, -114.0619580382786,
				-115.5262431985964, -116.9947655963349, -118.4674896252985, -119.9443802727076,
				-121.4254031044859, -122.9105242510315, -124.3997103934490, -125.8929287502272,
				-127.3901470643420, -128.8913335907693, -130.3964570843912, -131.9054867882796,
				-133.4183924223435, -134.9351441723258, -136.4557126791353, -137.9800690285029,
				-139.5081847409478, -141.0400317620444, -142.5755824529768, -144.1148095813711,
				-145.6576863123956, -147.2041862001190, -148.7542831791170, -150.3079515563189,
				-151.8651660030858, -153.4259015475109, -154.9901335669364, -156.5578377806775,
				-158.1289902429476, -159.7035673359765, -161.2815457633170, -162.8629025433313,
				-164.4476150028531, -166.0356607710182, -167.6270177732587, -169.2216642254551,
				-170.8195786282418, -172.4207397614594, -174.0251266787517, -175.6327187022996,
				-177.2434954176906, -178.8574366689172, -180.4745225535015, -182.0947334177417,
				-183.7180498520766, -185.3444526865647, -186.9739229864740, -188.6064420479796,
				-190.2419913939653, -191.8805527699268, -193.5221081399727, -195.1666396829207,
				-196.8141297884864, -198.4645610535616, -200.1179162785797, -201.7741784639657,
				-203.4333308066682, -205.0953566967709, -206.7602397141823, -208.4279636253997,
				-210.0985123803468, -211.7718701092825, -213.4480211197782, -215.1269498937633,
				-216.8086410846347, -218.4930795144308, -220.1802501710668, -221.8701382056304,
				-223.5627289297358, -225.2580078129343, -226.9559604801810, -228.6565727093549,
				-230.3598304288313, -232.0657197151060, -233.7742267904686, -235.4853380207244,
				-237.1990399129641, -238.9153191133784, -240.6341624051185, -242.3555567061996,
				-244.0794890674472, -245.8059466704848, -247.5349168257623, -249.2663869706235,
				-251.0003446674120, -252.7367776016153, -254.4756735800445, -256.2170205290502,
				-257.9608064927735, -259.7070196314304, -261.4556482196296, -263.2066806447224,
				-264.9601054051850, -266.7159111090305, -268.4740864722518, -270.2346203172932,
				-271.9975015715518, -273.7627192659057, -275.5302625332701, -277.3001206071805,
				-279.0722828204013, -280.8467386035603, -282.6234774838084, -284.4024890835033,
				-286.1837631189168, -287.9672893989662, -289.7530578239676, -291.5410583844119,
				-293.3312811597627, -295.1237163172749, -296.9183541108347, -298.7151848798200,
				-300.5141990479796, -302.3153871223338, -304.1187396920921, -305.9242474275908,
				-307.7319010792484, -309.5416914765391, -311.3536095269832, -313.1676462151554,
				-314.9837926017090, -316.8020398224175, -318.6223790872312, -320.4448016793502,
				-322.2692989543125, -324.0958623390975, -325.9244833312437, -327.7551534979814,
				-329.5878644753791, -331.4226079675044, -333.2593757455977, -335.0981596472600,
				-336.9389515756531, -338.7817434987129, -340.6265274483755, -342.4732955198150,
				-344.3220398706937, -346.1727527204242, -348.0254263494428, -349.8800530984944
			};

			for (integer n = 1; n < 257; ++n)
			{
				real measured = lnVolumeUnitSphere<real>(n);
				real correct = correctSet[n];

				real error = relativeError<real>(measured, correct);
				real maxError = 7e-15;
				TEST_ENSURE_OP(error, <, maxError);

				/*
				if (error > maxError)
				{
				std::cout << n << " : " << measured << ", " << correct << std::endl;
				}
				*/
			}
		}
	};

	void test()
	{
		Test test;
		test.run();
	}

	void addTest()
	{
		testRunner().add("sphere_volume", test);
	}

	CallFunction run(addTest);

}
