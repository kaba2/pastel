Miscellaneous techniques
========================

[[Parent]]: techniques.txt

Abstract reals and integers
---------------------------

You should not work with concrete types, but by types
that model the desired abstract concept!
Rather than using the native types, abstract an integer used
for indices and counts as its own type. Do the same for reals.

[[CppCode]]:
	
	typedef int integer;
	typedef float real;
	
	int main()
	{
		for (integer i = 0;i < 5;++i)
		{
			// Do something.
		}
		
		const real piApprox = 3.14;
		
		return 0;
	}
	
Single floats work nicely as models for real numbers most of the time.
However, by doing this kind of abstraction it is possible to change the 
representation to a double if at some point it is found that the 
accuracy of a single float is not enough.

Do turn off some of the compiler warnings
-----------------------------------------

Some people take an obsession to eliminate every warning the
compiler has to offer. Paradoxically, this leads to worse code than
what can be achieved by a more relaxed approach.
I will now justify this claim by listing some of the compiler warnings
that I have turned off in Visual Studio 2008 and by explaining my reasons for doing that.

4351
new behavior: elements of array 'array' will be default initialized

This simply says that the behaviour of the compiler has changed since the last
version. Well, after checking the affected places, there is clearly no
need for this warning anymore in that particular project.

4996
'function': was declared deprecated

This warning is simply rubbish, since the functions which are referred to
are functions in the Standard Library which are not deprecated in the standard. 
The questionable intent here was probably to promote Microsofts 'safe' 
implementation of the standard library.

4018
'expression' : signed/unsigned mismatch

Assume you end up in the unfortunate situation that you must assign
an unsigned integer to a signed integer or vice versa. As discussed elsewhere
on this page, there is nothing that can be done to save the day because
both directions are information destroying. Some people at this 
situation use a cast to get rid of the warning. This is a bit of a self-deception.
After all, the problem is not resolved by the cast, it is only sweeped
under the rug. Assume that you some day end up suspecting
that a bug is actually being caused by a unsigned/signed conversion. Then you
have no way of finding the spots where that happens (except by manual inspection).
If instead you would have avoided the casting and turned off the compiler warning,
you could now enable the warning to spot those problematic places.

4244
'argument' : conversion from 'type1' to 'type2', possible loss of data. 

This warning refers to a floating point type being converted to an integer type.
It is self-evident that there is possible loss of data when doing the conversion.
In addition, because the cast generates equivalent code to that of without the cast, 
to me this warning serves no purpose. I also find the code looking
aesthetically better when I don't perform the cast. Finally, if there
is any day a suspicion that a bug is being caused by this kind of
operation, then the compiler can help me to locate the place.

Use precondition checking
-------------------------

[[Link]]: ensure.txt


