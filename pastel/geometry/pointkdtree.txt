PointKdTree class
=================

[Parent]: bsp_tree.txt

Some properties of PointKdTree
------------------------------

### Insertion of points

Points can be inserted into the tree at any time. The
insertion of points is separated from refinement and
thus at insertion they are simply stored in the tree. 
You can perform refinement later if needed.

### Removal of points

Points can be removed from the tree at any time. 

### Automatic tracking of bucket nodes

When adding or removing points, the bucket nodes are
tracked automatically. In particular, this allows
the PointKdTree to adapt to changing point sets.

### Constant time bucket-node look-up for points

Given a point stored in the tree, PointKdTree is able to return
the bucket node containing the point in constant time.
Especially in nearest neighbor searching this allows to
save the cost of one full-height down-traversal. In addition,
because it returns the containing bucket node rather than 
just the containing leaf node, one also saves part of the 
cost of redundant up-traversal. Being able to do this
look-up is a requirement for efficient removal of points.

### Parent nodes for up-traversal

In addition to being able to traverse the tree from the
root to the leaves, PointKdTree allows you to move from
a child to its parent. Particularly in nearest neighbor
searching this allows for an efficient bottom-up approach,
where you immediately start from the right bucket node and
then traverse the nodes as in depth-first traversal.
The parent nodes are also essential in being able to update
bucket nodes efficiently when adding or removing points.

### Node bounds on the splitting axis

Each split node contains the bounds of the node on
the splitting axis. Knowing these bounds is essential in
the implementation of an efficient nearest neighbor
searching algorithm.


