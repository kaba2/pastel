Point-pattern matching
======================

[Parent]: pastelgeometry.txt

Theory
------

Let ''P = {p_1, ..., p_m}'' and ''Q = {q_1, ..., q_s}'' be
two finite point-sets in ''RR^n''. Given some class of 
transformations, such as the class of affine, conformal affine, 
rigid, or projective transformations, the problem of
_point-pattern matching_ is to find a transformation in that class 
which maps ''P'' to ''Q'' _well enough_. Ideally, one would give an
''epsilon in RR'' as a parameter such that a transformation is good 
enough if the image of each point ''p_i'' has a unique nearest neighbor 
''q_{j(i)}'' in its ''epsilon''-neighborhood (under some chosen metric). 
The ''epsilon'' is called the _matching distance_. 
If there is no solution, then the algorithm should report so, and if 
there are multiple such solutions, then any of them will do. 
However, in practical problems both ''P'' and ''Q'' can be missing some 
points, or have some extraneous points. Thus the condition for a good 
transformation is relaxed by requiring only a percentage of the points of
''P'' to satisfy the ''epsilon''-criterion.

Practice
--------

Pastel implements an efficient randomized algorithm for point pattern
matching in 2d under the class of conformal affine transformations, which
is based on examining local neighborhoods of the points of ''Q'' and
the points of ''P''. Only if the local neighborhoods match, it is 
checked if the match is also global. Such a technique is a fast way to reject
transformation candidates. However, it has certain drawbacks:

 * It might reject a valid transformation.
 * If the point-patterns are highly self-similar (e.g. a grid of points),
 then lots of local neighborhoods match and the algorithm slows down
 remarkably.

The first drawback is taken care by probabilistic arguments: it is accepted
provided that it does not happen often. This is taken care by choosing
the local neighborhood sizes carefully. The second drawback is a general problem
with the point-pattern matching problem, not specifically related to the
algorithm Pastel uses. Fortunately, many practical problems do not have this
problem.

References
----------

"A Fast Expected-Time 2d Point-Pattern Matching Algorithm",
P.B. Van Wamelen et al., Pattern Recognition 37 (2004), 1699-1711.