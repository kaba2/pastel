Half-edge structure
===================

[[Parent]]: data_structures.txt

The _half-edge structure_ is a data structure for efficiently storing and manipulating a restricted set of finite 2-dimensional cell-complexes.

Definitions
-----------

An _open (closed) cell_ is a topological space which is homeomorphic to an open (closed) ball in ''RR^n'', for some ''n in NN''. A _cell_ is either an open cell or a closed cell. Given a cell, its associated ''n'' is called its _dimension_; then a cell is called an _''n''-cell_. Let ''X'' be a topological space.  A _cell-decomposition_ of ''X'' is a partition ''C'' of ''X'' into open cells, such that if ''c in C'' is an open ''n''-cell, with ''n > 0'', then there exists a continuous map, called a _characteristic map_, from some closed ''n''-cell ''D'' into ''X'', which restricts to a homeomorphism from the interior of ''D'' onto ''c'', and maps the boundary of ''D'' into the union of all open cells, of the cell-decomposition, of dimensions less than ''n''. The _dimension_ of a cell-decomposition is the supremum of the dimensions of its open cells. A cell-complex is a Hausdorff space ''X'', together with a cell-decomposition of ''X''.

The half-edge structure is a finite 2-dimensional cell-complex, with the added requirement that the boundary of each open ''n''-cell in the cell-decomposition, for ''n > 0'', be a union of lower-dimensional open cells. The 0-cells, 1-cells, and 2-cells, of the half-edge structure, are called _vertices_ , _edges_, and _polygons_, respectively.

Half-edges
----------

In addition to the cells, the half-edge structure also includes _half-edges_, which encode most of the information in the cell-decomposition. The half-edges are directed edges of which there are 2 for each edge, oriented oppositely. Given a half-edge H, the oppositely oriented half-edge is called the _pair_ of H. Every half-edge has an _origin_ vertex and a _destination_ vertex. If a half-edge has A and B as origin and destination, respectively, then its pair has B and A as origin and destination, respectively. Every half-edge has a _successor_ and a _predecessor_. These links form a _loop_, and thus each half-edge is associated to some loop, dividing the set of half-edges into equivalence classes. Each loop can contain a _polygon_. However, the loop can also be empty, representing a hole.

Types
-----

Generic data structure
: `HalfMesh`

Stable settings-aliases
: `HalfEdge`

Properties
----------

The half-edge structure implementation in Pastel has the following properties:

Task / Property                                                          | Complexity
-------------------------------------------------------------------------|------------------
Insert / remove an isolated vertex.                                      | ''Theta(1)''
Insert an edge from vertex u to vertex v.                                | ''O(u' + v') cap Omega(1)''
Insert / remove a polygon specified with ''k'' edges.                    | ''Theta(k)''
Insert a polygon specified with vertices ''(v_1, ... v_k)''.             | ''O(sum v_i') cap Omega(k)''
Find a half-edge connected to a given vertex / edge / polygon.           | ''Theta(1)''
Find the pair / successor / origin / polygon of a half-edge.             | ''Theta(1)''
Space                                                                    | ''Theta(n + m + p)''

Here ''n'' is the number of vertices, ''m'' is the number of edges, and ''p'' is the number of polygons in the half-edge structure. In addition, ''v' '' is the number of edges incident to vertex ''v''. Combining the above, it follows that the predecessor / destination of a half-edge can also be found in ''Theta(1)'' time.

The half-edge structure can solve the following problems efficiently (in linear time over the number of elements in the neighborhood):

 * find all edges and polygons connected to a given vertex,
 * find all vertices and polygons connected to a given edge, and
 * find all vertices and edges connected to a given a polygon.
 
Finally, the half-edge structure allows efficient manipulation of the cell-decomposition, including joining and splitting cells.

Expressiveness
--------------

The half-edge structure can represent

 * those finite 2-dimensional cell-complexes which are also 2-manifolds with a boundary,
 * all finite [graphs][Graph] including those with edge loops and multiple edges, and
 * many kinds of mixes of the above, important in particular when building a mesh.

[Graph]: [[Ref]]: incidence_graph.txt
