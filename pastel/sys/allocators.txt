Memory allocators
=================

[Parent]: memory.txt

Theory
------

In general, creating custom allocators to gain efficiency
compared to the default allocator is a bad idea.
However, in some very specialized situations one can 
do much better, both in space and time. 

One such situation is when the memory is allocated at 
arbitrary times, but is deallocated all at once. This leads to 
the idea of arena allocation: allocate big chunks of memory at a 
time, and share memory from this chunk with an almost trivial 
algorithm (just incrementing a pointer). When one wants to deallocate
the memory, simply deallocate all the chunks that have been
allocated.

Another situation is when the allocated memory is of fixed
size. This assumption allows to create very efficient allocation
and deallocation algorithms, and with minimal book-keeping.
This leads to the so-called pool allocation.

Practice
--------

Pastel implements allocators for arena and pool allocation.
In addition Pastel has an adapter for the native allocator.
These allocators can be used by themselves, but they are also
used by some data structures in Pastel, see the links below.

See also
--------

### Data structures in Pastel that use these allocators

[FastList](./fastlist.htm)

[UnorderedMap](./unorderedmap.htm)

[UnorderedSet](./unorderedset.htm)
