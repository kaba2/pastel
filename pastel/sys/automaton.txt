Finite-state automaton
======================

[[Parent]]: data_structures.txt

The `Automaton` is a data structure for storing and manipulating 
finite-state automata.

Definitions
-----------

A _finite-state automaton_ is a finite labeled directed [graph][Graph]
with vertices ''Q'', called the _states_, and ''Sigma''-labeled 
edges 'T', called the _transitions_, together with a set of _start_ 
states ''S subset Q'', and a set of _final_ states ''F subset Q''.

Let ''~~> subset (Q times Sigma) times Q'' be a relation such that
''(q, s) ~~> p'' if and only if there exists a transition ''t in T''
from ''q'' to ''p'' with the label ''s''. Then the ''~~>'' is called 
the _transition relation_. The transition relation is extended to 
''Q times Sigma^*'' by ''(q, epsilon) ~~> q'', and ''(q, xs) ~~> p'' 
if and only if there exists ''r in Q'' such that ''(q, x) ~~> r'' 
and ''(r, s) ~~> p''.

A finite-state automaton is called _deterministic_ if and only if it
has at most one start-state, and the transition relation is a partial
function. The _language_ recognized by a finite-state automaton ''A'' 
is defined by 
''L(A) = {x in Sigma^* : exists q in S: exists p in F: (q, x) ~~> p}''.

### Single start-state vs a set of start-states

Sometimes finite-state automata are defined as having exactly one
start-state. This is problematic, because one can not then represent 
the minimal automaton for the empty language, and the construction of 
the union of two automata becomes cumbersome. In contrast, when using
a set of start-states, one can

 * represent the minimal automaton for the empty language as 
 ''Q = S = F = T = empty-set'', and
 * represent the union of two automata as ''Q = Q_1 union Q_2'', 
 ''S = S_1 union S_2'', ''F = F_1 union F_2'',
 ''Sigma = Sigma_1 union Sigma_2'', and ''T = T_1 union T_2''.

### Traditional definition

A slightly weaker, but more traditional, definition is the following.
A _finite-state_ automaton is a tuple ''(Q, Sigma, S, ~~>, F)'',
where ''Q'' and ''Sigma'' are finite sets, called the _states_ and 
the _symbols_, respectively, ''S subset Q'' and ''F subset Q'' are 
finite sets, called the _start states_ and the _final states_, 
respectively, and ''~~> subset (Q times Sigma) times Q'' is a relation,
called the _transition relation_.

The difference between this definition and the definition above is that
the latter allows for multiple transitions between two states with the 
same symbol, while the former does not. The two definitions are equal
in recognition power, and the definitions given above using the transition
relation hold here too. The finite-state automaton in this traditional
sense is a finite-state automaton in the above sense when it is defined
that there is a transition from ''q'' to ''p'' with a label ''s'' if
and only if ''(q, s) ~~> p''.

[Graph]: [[Ref: incidence_graph.txt]]

Data structure
--------------

The data structure underlying the automaton is the 
[[Link: incidence_graph.txt]]; the automaton has all the 
properties that the `IncidenceGraph` has. What the automaton
data structure layers on top of this is that it stores the 
set of start states and the set of final states, and also 
makes this information available through a state. An important 
part of the design is that automata can be merged in constant 
time to yield the (non-deterministic) automaton recognizing the
union of the languages recognized by the automata.

