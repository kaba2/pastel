Incidence graph
===============

[[Parent]]: data_structures.txt

The _incidence graph_ is a data structure for storing and manipulating 
labeled graphs. 

Properties
----------

The incidence graph data structure has the following properties:

Task / Property                                                          | Complexity
-------------------------------------------------------------------------|-------------------
Insert a vertex.                                                         | ''O(1)''
Remove a vertex and its ''p'' incident edges.                            | ''O(p)''
Insert / remove an edge.                                                 | ''O(1)''
Provide a list (and number) of vertices.                                 | ''O(1)''
Provide a list (and number) of edges.                                    | ''O(1)''
Provide a list (and number) of incoming edges incident to a vertex.      | ''O(1)''
Provide a list (and number) of outgoing edges incident to a vertex.      | ''O(1)''
Provide a list (and number) of undirected edges incident to a vertex.    | ''O(1)''
Find the end-vertices of an edge.                                        | ''O(1)''
Space                                                                    | ''O(n + m)''

Here ''n'' is the number of vertices, and ''m'' is the number of edges.

### Generality

* supports directed, undirected, and mixed graphs, with the type of the graph being selectable at compile time,
* supports arbitrary graphs, including self-loops and multi-edges,
* provides a way to store user data (labels) in vertices and edges,

### Space optimality

* does not use any extra memory in supporting the different kinds of graphs; directed and undirected graphs do not use memory to store undirected and directed edges, respectively,
* the use of labels is optional at compile-time; no memory is used for the labels if they are not used,

### Preservation of identity

* preserves the identity (memory address) of vertices and edges during their lifetime,
* can change the directionality of an edge without changing the identity of the edge, and
* can change a directed edge to an undirected edge and vice versa without changing the identity of the edge.

Definitions
-----------

A _graph_ is a triple ''(V, E, I)'', where ''V'' and ''E'' are finite sets, called the _vertices_ and the _edges_, respectively, and ''I : E --> V^2 times {0, 1}'' is called the _incidence function_. The incidence function tells for each edge its end-vertices, and whether the edge is directed (1) or not (0). If an edge ''e'' is directed, then the first element and the second element of ''I(e)'' denote the origin vertex and the destination vertex, respectively. This generality is required to represent all of undirected graphs, directed graphs, and mixed graphs, possibly combined with self-loops and multi-edges. A _labeled graph_ is a graph together with _labeling functions_ ''L_V : V --> D_V'' and ''L_E : E --> D_E'', where ''D_V'' and ''D_E'' are arbitrary sets, called the _vertex labels_ and the _edge labels_, respectively. A graph is called _directed_, if all its edges are directed. A graph is called _simple_ if it has at most one edge between any two vertices, and no loop-edges. 

References
----------

_Graph Theory and its Applications_, 2nd. ed., Jonathan L. Gross, Jay Yellen, 2005.