Named tuples
============

[[Parent]]: data_structures.txt

A _named tuple_ is an object to contain a fixed amount of
objects of possibly different type, and to refer to them by 
given names. While tuples are implemented generically in C++11, 
it is still perhaps clearer to refer to the contained objects by
familiar names and syntax, rather than `std::get<Name>(tuple)`.

The named tuples come with an embedded `hash()`-function, which 
requires that the objects are hashable, and also equality
comparison functions. This hash-function can be automatically 
called by the `Embedded_Hash` hashing object. The named tuples 
are generated by the macros PASTEL_NAMED_TUPLEx(), where the
`x` is the number of contained objects. The macros take as
input the name of the tuple type, and the types and names of 
the contained objects.

Motivation
----------

The need for named tuples comes up in the implementation of
data structures, where composite data needs to be used
as a key of an associative data structure (such as `std::map`).
For example, in LL-parsing, we would like to lookup the
rule to apply given a predicted non-terminal symbol, and a
lookahead terminal symbol. Then we could use named tuples
as keys as follows:

[[CppCode]]:
	PASTEL_NAMED_TUPLE2(Entry,
		Symbol, predicted,
		Symbol, lookahead);

	std::unordered_map<Entry, Rule, Embedded_Hash> llParseTable;

	auto iter = llParseTable.find(Entry(predicted, lookahead));

	const Entry& entry = iter->first;
	entry.predicted;
	entry.lookahead;

This is much clearer than using `pair`s (e.g. `first` and 
`second`), or `tuple`s (e.g. `std::get<Predicted>(entry)`).

