Automaton minimization
======================

[[Parent]]: automaton_algorithms.txt

A _minimal automaton_ for a language is a finite-state automaton
which has the minimum number of states needed for recognizing the 
language. Given an automaton A, minimization is the problem of
finding a minimal automaton for the language generated by A. Here 
we consider the automaton in the sense of allowing the transition 
function to be partial (taking a missing transition implicitly 
leads to an unaccepting state).

Algorithm
---------

The implemented minimization algorithm (see \[1\]) has the 
following properties. It takes

 * time ''O(n + m log(m))'', and 
 * space ''O(n + m)'',

where ''m'' is the number of transitions, and ''n'' is the number 
states. For comparison, the classical Hopcroft's minimization 
algorithm takes time ''O(k n log(n))'', where ''k'' is the number of
symbols.

References
----------

\[1\] "Fast brief practical DFA minimization", Antti Valmari, 
Information Processing Letters, Volume 112, Issue 6, 2012, pp. 213-217.
