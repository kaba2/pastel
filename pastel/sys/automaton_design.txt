Automaton design notes
======================

[[Parent]]: automaton.txt

Goals
-----

The automaton

 * can represent any non-deterministic automaton, with epsilon-transitions,
 * for a given state, can get a list all the incoming and outgoing 
 transitions (and get their number) in constant time,
 * can be customizable at compile-time,
 * can associate user-data with states and transitions,

Epsilon transitions
-------------------

How should the epsilon-transitions be represented?

### Option 1: Epsilon as an externally-specified symbol

In this option the automaton itself only works with symbols,
and is not aware of epsilon transitions. Instead, the epsilon
is simply one of the symbols, and the algorithms working on
automata are passed the epsilon symbol as input.

I tried this design at first, but it seems highly uncomfortable
to have to pass the epsilon around, a concept which does not 
have anything to do with symbols.

In addition, this doesn't sound good when merging two automata:
it becomes possible, by accident, to get two sets of epsilon 
transitions (with different symbols).

### Option 2: Epsilon as an internally-specified symbol

In this option the automaton is passed the identity of the
epsilon symbol. This avoids the need to pass the epsilon symbol
into the algorithms.

However, in some cases it is not clear what the symbol should be.
For example, if the symbol is an iterator, then it can't be the
end-iterator, because the iterator might need to be hashed by
its dereferenced address. Thus, a separate symbol could need to
specifically be created for the epsilon. As a more concrete
example, consider that the symbols are the symbols of a grammar.
Then we would have to create a new terminal symbol in the grammar
for the epsilon. However, that epsilon symbol, only meaningful
to the automaton, would not make any sense in the grammar rules.

In addition, this does not solve the problem with differing
epsilons when merging automata.

### Option 3: Generalized symbols

It seems as if we would need to generalize the concept of a symbol
in an automaton. Whatever the concept of the generalized symbol
is, it must be able to represent both the symbols, and the lack
of a symbol (epsilon).