Refinable partition
===================

[[Parent]]: data_structures.txt

The _refinable partition_ data structure is used to store and refine 
the partitioning of a (dynamic) set of elements.

Definitions
-----------

A _partition_ of a set ''S'' is a set of disjoint subsets ''P subset power-set(S)'' such that ''Union P = S''. A partition ''Q'' is called a refinement of a partition ''P'', if each ''p in P'' can be given as a union of some sets in ''Q''. In such a case the ''Q'' is called _finer than_ ''P'', and ''P'' is called _coarser than_ ''Q''. The coarsest partition is the singleton set ''{S}'', while the finest partition is the set of singletons of ''S''. The refinement relation is a partial order on the set of partitions.

Data structure
--------------

The idea of the data structure is the following. When a set in the partition is wanted to be split into two, this split is denoted by marking the elements of the other part. Multiple sets in the partition can be marked this way, perhaps incrementally. The actual refinement is committed by the `split()` function which splits all those sets that have both marked and unmarked elements. Such lazy splitting amortizes the cost of splitting.

Properties
----------

The refinable partition data structure implemented in Pastel has the following properties:

Task / Property                                              | Complexity
-------------------------------------------------------------|-------------------------------------
Mark an element.                                             | ''O(1)''
Unmark an element.                                           | ''O(1)''
Insert an element into a set.                                | ''O(1)''
Remove an element from a set.                                | ''O(1)''
Insert an empty set.                                         | ''O(1)''
Remove a set.                                                | ''O(m)''
Split a set.                                                 | ''O(1)'' amortized
Provide the list (and number) of elements in the partition.  | ''O(1)''
Provide the list (and number) of sets in the partition.      | ''O(1)''
Provide the list (and number) of elements in a set.          | ''O(1)''
Provide the list (and number) of marked elements in a set.   | ''O(1)''
Provide the list (and number) of unmarked elements in a set. | ''O(1)''
Find the set that contains a given element.                  | ''O(1)''
Provide the list of those sets which contain marked elements.| ''O(1)''
Find out whether an element is marked or not.                | ''O(1)''
Space                                                        | ''O(n)''

Here ''m'' is the number of elements contained in a set, and ''n'' is the number of elements in the partition.

### Storage

 * user-data can be stored in both elements and sets,
 * user-data is optional at compile-time; in case it is not
 needed, it will not take additional memory,
