C-fast trie
===========

[[Parent]]: data_structures.txt

The _c-fast trie_ is a data-structure which implements an efficient dynamic ordered dictionary for fixed-size integers.

Properties
----------

Let ''n in NN'' be the number stored elements. The c-fast trie implementation 
in Pastel has the following properties:

Property                           | Complexity
---------------------------------- | -----------------
Insert an element                  | ''O(phi)''
Remove an element                  | ''O(phi)''
Find an element                    | ''O(log(phi))''
Find the predecessor of an element | ''O(log(phi))''
Find the successor of an element   | ''O(log(phi))''
Find the predecessor of a stored element | ''O(1)''
Find the successor of a stored element   | ''O(1)''
Find minimum element               | ''O(1)''
Find maximum element               | ''O(1)''
Space                              | ''O(n)''

### Number of bits

The number of bits in the stored integers can be chosen arbitrarily at compile-time. The underlying integer type is the [fixed-size integer][FixedSize].

[FixedSize]: [[Ref]]: integer.txt

### Value data

In addition to the key, an element can store arbitrary user-data. In contrast to the keys, the values can be modified at any time. In case user-data is not needed, it can be defined as `void`, and Pastel makes sure that no memory is spent on the values.

Efficiency
----------

The c-fast trie is more efficient than, say, the red-black tree or the deterministic skip-list. For example, the searches in it are local and double-logarithmic, rather than logarithmic. While at first this seems impossible in view of the fact that by using comparisons of elements a logarithmic complexity is necessary, the c-fast trie gets around this problem by concentrating on fixed-size integers in the w-bit RAM model, where multiple comparisons can be carried out in parallel. 

Space complexity
----------------

The first data-structure to realize a double-logarithmic search-performance was the x-fast trie. However, its weakness is its superlinear space-complexity. The c-fast trie solves this problem by maintaing a special kind of an x-fast trie, a compact x-fast trie, which can be stored in linear space. Perhaps unexpectedly, this also improves the time-complexities of the data-structure over the x-fast trie.

