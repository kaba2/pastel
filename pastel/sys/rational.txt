Rational numbers
================

[[Parent]]: real.txt

Theory
------

The _rational numbers_ are an ordered field ''((QQ, +, *), <=)'', where 

 * ''QQ = (ZZ xx ZZ^+)/~''
 
 * ''(x, y) ~ (z, w) <=> x * w = z * y'' (''~'' is an equivalence relation).
 
 * ''[(x, y)] <= [(z, w)] <=> x * w <= z * y'' (''[(x, y)]'' means the equivalence class of ''(x, y)'')

 * ''forall x, z in ZZ, y, w in ZZ^+: [(x, y)] + [(z, w)] = [(x * w + y * z, y * w)]''

 * ''forall x, z in ZZ, y, w in ZZ^+: [(x, y)] * [(z, w)] = [(x * z, y * w)]''

It follows that:

 * ''[(1, 1)]'' is the multiplicative identity element.
 
 * ''[(0, 1)]'' is the additive identity element.
 
 * The subset consisting of the elements ''[(x, 1)]'' is isomorphic 
 to the ordered ring of integers.
 
 * ''forall x in ZZ \setminus {0}, y in ZZ^+: [(x, y)]^-1 = [("signum"(x) * y, "signum"(x) * x)]''

Most often, one works with the elements of ''ZZ xx ZZ^+'', rather than with
the rational numbers themselves. It must then be remembered that the
corresponding equivalence classes are implicitly meant instead.

Practice
--------

The `Rational` class template can be used in conjuction with 
[integer types][Integer] to provide a rational number. Rationals 
have the potential to provide exact arithmetic under restricted 
situations.

[[CppCode]]:
	template <typename Integer>
	class Rational;
	
[Integer]: [[Ref]]: integer.txt

There are several values with a special meaning:

* ''0 / 0'' is called _Not-A-Number_ (NaN).
* ''x / 0'' for any ''x > 0'' is called Infinity(x).
* ''y / 0'' for any ''y < 0'' is called MinusInfinity(y).
 
It holds that:

* Infinity(x) = Infinity(y), for any ''x, y != 0''.
* MinusInfinity(x) = -Infinity(y), for any ''x, y != 0''.

Thus we can simply speak of Infinity and -Infinity.
The `Rational` class maintains two invariants:

* If the number is not NaN, GCD(numerator, denominator) = 1.
* denominator >= 0.
