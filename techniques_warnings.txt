Disabling compiler warnings
===========================

[[Parent]]: techniques.txt

When a compiler emits a warning, it might or might not mean that 
changes are warranted in the code itself. While most of the warnings
are appropriate, some are not, and further, to some warnings there
are no practical solutions. In these cases, instead of modifying your
code, disabling the warnings is the right thing to do. Here we list
all the warnings we have disabled in Pastel, and explain why we have
done that.

Visual Studio
-------------

`4018 'expression' : signed/unsigned mismatch`

This warning notifies that a signed-unsigned integer conversion is 
taking place. This conversion is generally an information-destroying 
process in both directions. Generally, you should avoid this situation by 
[not using unsigned integers][Unsigned]. However, if this not possible, 
there is nothing you can do. While a cast might get rid of the warning, 
it does not get rid of the problem. A better approach is to disable the 
warning: if at some later time an unsigned-signed conversion is thought 
to cause problems, then, by enabling the warning, the compiler can help 
you to locate those places again. 

[Unsigned]: [[Ref]]: techniques_unsigned.txt

`4180 qualifier applied to function type has no meaning; ignored`

`4224 nonstandard extension used : formal parameter 'identifier' was previously defined as a type`

`4244 'argument' : conversion from 'type1' to 'type2', possible loss of data.`

[[CppCode]]:
	int a = 1.0f;

In this case, the warning refers to a floating point type being converted to 
an integer type. It is self-evident that there is possible loss of data when
doing the conversion, and this is most of the time also the intention (rounding). 
This warning essentially urges to use a cast to make the conversion explicit 
_to the reader_. From the compilers view, this cast is redundant, since the 
implicit conversion will take effect in any case, and can be seen as a 
case-by-case supression of the warning. We find the redundant casts making 
the code less clear, and thus disable the warning instead. At a later time, 
if desired, the compiler can help to locate these places by enabling the 
warning.

[[CppCode]]:
	long long c = 1;
	int b = c;

In this case, the warning is more to the point. However, since we use the 
`integer` type exclusively to store amounts, this is not a problem. See 
the explanation for the warning 4267 below to see why this is.

`4251 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'`

`4267 'var' : conversion from 'size_t' to 'type', possible loss of data`

In general, this warning appears because the size of `std::size_t` depends
on the environment. In a 64-bit environment it is probable to be a 64-bit
integer. Therefore, if the assigned-to variable is only 32-bit, this warning
catches that. In particular, this warning should trigger often when 
`PASTEL_LARGE_INTEGER` is not defined, since the `integer` is then 32-bit.

Two things need to be noted here. First, we use the `integer` type exclusively
to denote amounts. Therefore the `std::size_t` to `integer` conversion 
should form almost all of these warnings. However, if the `integer` is 
chosen 32-bit (by not defining `PASTEL_LARGE_INTEGER`), then this is a 
deliberate memory-saving choice based on the assumption of amounts smaller 
than 2^31. Under this assumption, the conversions are never lossy.
On the other hand, if `PASTEL_LARGE_INTEGER` is defined, then this warning
disappears since `std::size_t` and `integer` are then of the same size;
again the conversions are never lossy. Therefore this warning can be
disabled.

`4305 'identifier' : truncation from 'type1' to 'type2'`

[[CppCode]]:
	void f(float a) {}

	double a = 0.1;
	f(a);

`4351 new behavior: elements of array 'array' will be default initialized`

This warning notifies of changed behaviour compared to a previous version
of Visual Studio. Because the new behaviour is the correct one as defined 
by the C++ standard, the warning carries no information.

`4800 'type' : forcing value to bool 'true' or 'false' (performance warning)`

`4804 'operation' : unsafe use of type 'bool' in operation`

`4996 'function': was declared deprecated`

This warning is seen on common C++ Standard Library functions, and is an 
incorrect one. This warning appeared alongside with the Microsoft's 'safe' 
implementation of the STL in Visual Studio 2008. Considering that the 
reported C++ Standard Library functions are _not_ deprecated in the C++ 
Standard, and will not be deprecated in the next C++ standard either,
the only motivation seems to be to promote the safe implementation.



