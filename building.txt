Building the Pastel library
===========================

[[Parent]]: pastel.txt

This section describes how to build the Pastel library. 

Since Pastel uses C++11 features, it requires a recent compiler to
be built. Pastel has been successfully built with Visual Studio 2012
(+ Update 2 + Compiler Update), gcc 4.6.3, gcc 4.7.1, and clang 3.1.

__Note__: While the source code contains Visual Studio specific 
build files, you should ignore them, and follow the build process 
described here.

[Main]: [[Ref]]: pastel.txt

Build process
-------------

The steps to build Pastel are as follows:

### 1. Install external libraries

See the [dependencies][Dependencies] page.

[Dependencies]: [[Ref]]: dependencies.txt

### 2. Install CMake

Pastel uses the [CMake][CMake] build-script generator to turn
cross-platform builds into a trivial task. CMake is a program
which reads in a generic build-script and outputs a tool-specific 
build-script (e.g. Unix makefiles, Visual Studio projects, etc.)

CMake can be downloaded from [here][DownloadCMake]. 

### 3. Set the external library directories

In the Pastel root directory, open the file `CMakeLists.cmake`, and modify
the directories to refer to the locations you installed the external 
libraries at in step 1.

	# The directory of the Boost library's source code.
	# The includes are of the form 'boost/static_assert.hpp'.
	set (BoostIncludeDirectory ../boost_1_53_0)

	# The directory of the Matlab header files.
	# The includes are of the form 'mex.h'.
	set (MatlabIncludeDirectory /Applications/MATLAB_R2013a.app/extern/include)

### 4. Generate tool-specific build-scripts using CMake. 

In the Pastel `build/` directory, type

	cmake 

to see the supported tool-sets (generators) on your platform.
Then call cmake similarly to:

	cmake .. -G "Unix Makefiles"

where the `G` option specifies the tool-set to generate
the build-scripts for (here demonstrated for makefiles).

Note: If you want to generate build-scripts for other tool-sets
later, you need to first remove the `CMakeCache.txt` file.
The purpose of this file is to remember options so that they
need not specified repeatedly.

Configurations
--------------

Pastel comes with two different build configurations. These are:

 * debug
 * release

The `debug` configuration enables debugging information and turns on all
[ASSERTs and PENSUREs][InvariantChecking]. The `release` configuration 
disables debugging information, and enables multi-core processing for
some algorithms.

Property / Config  | debug |release |
-------------------|-------|--------|
ASSERT and PENSURE | x     |        |
Debug information  | x     |        |
Multiple cores     |       | x      |

[InvariantChecking]: [[Ref]]: ensure.txt

Building
--------

When CMake has generated you the build-scripts, you probably already
know how to proceed. However, here are some specific examples:

### Makefiles

In the `build/` directory, run

	make -j 8

The `j` option specifies the number of threads to use in
the building process. On multi-core machines this shortens the
build-times dramatically.

### Visual Studio

To build Pastel using Visual Studio:

 * Open the solution file `Pastel.sln`. 
 * Right click on the solution in Solution Explorer, and choose 
 Configuration Manager. 
 * Select the desired Active Solution Configuration as Release
 (or Debug if you want to do debugging).
 * Build solution.

Output files
------------

The libraries and executables will be written under the `build/`
directory.

[CMake]: http://www.cmake.org/

[DownloadCMake]: http://www.cmake.org/cmake/resources/software.html
