Building the Pastel library
===========================

[[Parent]]: pastel.txt

This section describes how to build the Pastel library. 

Since Pastel uses C++11 features, it requires a recent compiler to
be built. Pastel has been successfully built with Visual Studio 2012
(+ Update 2 + Compiler Update), gcc 4.6.3, gcc 4.7.1, and clang 3.1.

__Note__: While the source code contains Visual Studio specific 
build files, you should ignore them, and follow the build process 
described here.

[Main]: [[Ref]]: pastel.txt

Build process
-------------

The steps to build Pastel are as follows:

### 1. Install external libraries

See the [dependencies][Dependencies] page.

[Dependencies]: [[Ref]]: dependencies.txt

### 2. Install CMake

Pastel uses the [CMake][CMake] build-script generator to abstract
away the specifics of a given build-environment. CMake is a program
which reads in a generic build-script and outputs a tool-specific 
build-script (e.g. Unix makefiles, Visual Studio projects, etc.)

CMake can be downloaded from [here][DownloadCMake]. 

### 3. Set the external library directories

In the Pastel root directory, open the file `CMakeLists.txt`, and modify
the directories to refer to the locations you installed the external 
libraries at in step 1.

	# The directory of the Boost library's source code.
	# The includes are of the form 'boost/static_assert.hpp'.
	set (BoostIncludeDirectory ../boost_1_53_0)

	# The directory of the Matlab header files.
	# The includes are of the form 'mex.h'.
	set (MatlabIncludeDirectory /Applications/MATLAB_R2013a.app/extern/include)

If you also want to build the Matlab libraries, then open `build_pastel.m`
in the `pastel/` sub-directory, and modify the Boost include path 
correspondingly.

### 4. Generate tool-specific build-scripts using CMake. 

* In the Pastel root directory, create the `release/` directory.
* In the Pastel `release/` directory, type
		cmake-gui ..
* Press the `Configure` button.
* Select the tool-set to generate build-scripts for from the menu.
* Make sure the `Advanced` button is not checked.
* Select the desired build options.
* Press the `Configure` button again.
* Press the `Generate` button.

The build options are:

BuildExamples
: Whether to build Pastel's example executables.

BuildLibraries
: Whether to build Pastel's core libraries.

BuildMatlab
: Whether to build Pastel's Matlab libraries.

BuildTests
: Whether to build Pastel's test executables.

LargeIntegers
: Whether to make integers at least as large as pointers.

SharedLibraries
: Whether to build shared libraries rather than static libraries. The Matlab libraries will always be built as static libraries.

Parallel
: Whether to parallelize some of the algorithms. Currently
this requires OpenMp; the aim is to switch use Intel Threading
Building Blocks. Note: Express versions of Visual Studio do 
not support OpenMp. Neither does the current version of Clang.

Note: If you want to change the tool-set later, you need
to remove the `CMakeCache.txt` file, and run these 
instructions again. The purpose of this file is to remember 
options so that they need not specified repeatedly.

Note: You can follow similar instructions to create a debug build
instead. The only difference is that you create a `debug/` directory,
and to choose `Debug` as the `CMAKE_BUILD_TYPE` in `cmake-gui`.  

Configurations
--------------

Pastel comes with two different build configurations. These are:

 * debug
 * release

The `debug` configuration enables debugging information and turns on all
[ASSERTs and PENSUREs][InvariantChecking]. The `release` configuration 
disables debugging information, and enables multi-core processing for
some algorithms.

Property / Config  | debug |release 
-------------------|-------|--------
ASSERT and PENSURE | x     |        
ENSURE             | x     | x       
Debug information  | x     |        
Multiple cores     |       | x      

[InvariantChecking]: [[Ref]]: ensure.txt

Building
--------

When CMake has generated you the build-scripts, you probably already
know how to proceed. However, here are some specific examples:

### Makefiles

In the `build/` directory, run

	make -j 8

The `j` option specifies the number of threads to use in
the building process. On multi-core machines this shortens the
build-times dramatically.

### Visual Studio

To build Pastel using Visual Studio:

 * Open the solution file `Pastel.sln`. 
 * Right click on the solution in Solution Explorer, and choose 
 Configuration Manager. 
 * Select the desired Active Solution Configuration as Release
 (or Debug if you want to do debugging).
 * Build the solution (F7).

### XCode

To build Pastel in XCode 4:

 * Open the solution file `Pastel.xcodeproj`.
 * In the menu at the top of the screen, choose 
 `Product` --> `Scheme` --> `Edit scheme...`.
 * Select the Build Configuration as Release
 (or Debub if you want to do debugging).
 * Build the solution (Shift + Command + R, or the play button).

Output files
------------

The libraries will be placed in the `lib/config` directory, and
the executables will be placed in the `bin/config` directory,
where the `config` corresponds to either `debug` or `release`, depending
on the chosen configuration.

[CMake]: http://www.cmake.org/

[DownloadCMake]: http://www.cmake.org/cmake/resources/software.html
